{"version":3,"sources":["api/api.js","components/user/User.js","components/comment/Comment.js","components/commentList/CommentList.js","components/post/Post.js","components/postList/PostList.js","App.js","index.js"],"names":["getUrl","url","fetch","then","response","json","users","posts","comments","User","_ref","user","react_default","a","createElement","Header","as","href","concat","email","name","Comment","_ref$comment","comment","body","Message","CommentList","List","map","comment_Comment","key","id","Post","post","user_User","title","commentList_CommentList","PostList","search","Fragment","Input","type","placeholder","onChange","post_Post","App","state","originPosts","fullPosts","isLoading","hasError","getData","_this","setState","Promise","all","_ref2","Object","slicedToArray","postList","commentList","userList","_objectSpread","find","userId","filter","postId","catch","finally","handleSearch","event","toConsumableArray","includes","target","value","_this$state","this","Button","onClick","postList_PostList","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.57910362.chunk.js","sourcesContent":["function getUrl(url) {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nconst users = getUrl('https://jsonplaceholder.typicode.com/users');\nconst posts = getUrl('https://jsonplaceholder.typicode.com/posts');\nconst comments = getUrl('https://jsonplaceholder.typicode.com/comments');\n\nexport { users, posts, comments };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from 'semantic-ui-react';\n\nconst User = ({ user }) => (\n  <div>\n    <Header as=\"h2\">\n      <a href={`mailto:${user.email}`}>{user.name}</a>\n    </Header>\n  </div>\n);\n\nexport default User;\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    username: PropTypes.string,\n    email: PropTypes.string,\n    phone: PropTypes.string,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nconst Comment = ({ comment: { name, body } }) => (\n  <Message>\n    <Message.Header>{name}</Message.Header>\n    <p>{body}</p>\n  </Message>\n);\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n  }).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport { List } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport Comment from '../comment/Comment';\n\nconst CommentList = ({ comments }) => (\n  <List>\n    {comments.map(comment => (\n      <Comment comment={comment} key={comment.id} />\n    ))\n    }\n  </List>\n);\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport User from '../user/User';\nimport CommentList from '../commentList/CommentList';\n\nconst Post = ({ post }) => (\n  <div>\n    <User user={post.user} />\n    <Message>\n      <Message.Header>{post.title}</Message.Header>\n      <p>{post.body}</p>\n    </Message>\n    <CommentList comments={post.comments} />\n  </div>\n);\n\nexport default Post;\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    id: PropTypes.number,\n    user: PropTypes.object,\n  }).isRequired,\n};\n","import React from 'react';\nimport { Message, Input } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport Post from '../post/Post';\n\nconst PostList = ({ posts, search }) => (\n  <>\n    <Input\n      type=\"text\"\n      name=\"text-area\"\n      placeholder=\"Enter Search\"\n      onChange={search}\n    />\n    <Message>\n      {posts.map(post => (<Post post={post} key={post.id} />))}\n    </Message>\n  </>\n);\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  search: PropTypes.func.isRequired,\n};\n\nexport default PostList;\n","import React from 'react';\nimport './App.css';\nimport { Button } from 'semantic-ui-react';\nimport { users, posts, comments } from './api/api';\nimport PostList from './components/postList/PostList';\n\nclass App extends React.Component {\n  state = {\n    originPosts: null,\n    fullPosts: null,\n    isLoading: false,\n    hasError: false,\n  };\n\n  getData = () => {\n    this.setState({\n      isLoading: true,\n      hasError: false,\n    });\n\n    Promise.all([posts, comments, users])\n      .then(([postList, commentList, userList]) => {\n        const fullPosts = postList.map(post => ({\n          ...post,\n          user: userList.find(user => user.id === post.userId),\n          comments: commentList.filter(comment => comment.postId === post.id),\n        }));\n\n        this.setState({\n          fullPosts,\n          originPosts: fullPosts,\n        });\n      })\n      .catch(() => {\n        this.setState({\n          hasError: true,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n  };\n\n  handleSearch = (event) => {\n    const { originPosts } = this.state;\n\n    this.setState({\n      fullPosts: [...originPosts]\n        .filter(post => (post.title.includes(event.target.value))\n        || (post.body.includes(event.target.value))),\n    });\n  };\n\n  render() {\n    const {\n      isLoading, hasError, fullPosts,\n    } = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    if (hasError) {\n      return (\n        <>\n          <p>Loading failed</p>\n          <Button type=\"button\" onClick={this.getData}>Retry</Button>\n        </>\n      );\n    }\n\n    if (fullPosts === null) {\n      return (\n        <>\n          <p>No posts and comments yet</p>\n          <Button type=\"button\" onClick={this.getData}>Load</Button>\n        </>\n      );\n    }\n\n    return <PostList posts={fullPosts} search={this.handleSearch} />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}